-- ==========================================================
--  SCRIPT DE CREACIÓN DE BASE DE DATOS
--  Aplicación de mensajería TCP - Estructura SQL
-- ==========================================================

-- Elimina las tablas si existen (para pruebas / desarrollo)
DROP TABLE IF EXISTS logs;
DROP TABLE IF EXISTS messages;
DROP TABLE IF EXISTS files;
DROP TABLE IF EXISTS sessions;
DROP TABLE IF EXISTS users;

-- ==========================================================
--  TABLA: USERS
-- ==========================================================
CREATE TABLE users (
    id                      INT AUTO_INCREMENT PRIMARY KEY,
    username                VARCHAR(50) NOT NULL UNIQUE,
    email                   VARCHAR(100),
    registration_date        DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    total_messages_sent      INT DEFAULT 0,
    total_messages_received  INT DEFAULT 0
);

-- ==========================================================
--  TABLA: SESSIONS
-- ==========================================================
CREATE TABLE sessions (
    id                  VARCHAR(64) PRIMARY KEY,      -- Puede ser UUID
    user_id             INT NOT NULL,
    ip                  VARCHAR(45) NOT NULL,         -- IPv4/IPv6 compatible
    connection_time     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_activity       DATETIME,
    disconnection_time  DATETIME,
    status              ENUM('CONNECTED', 'DISCONNECTED') NOT NULL DEFAULT 'CONNECTED',
    message_count       INT DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users(id)
        ON DELETE CASCADE
);

-- ==========================================================
--  TABLA: FILES
-- ==========================================================
CREATE TABLE files (
    id              INT AUTO_INCREMENT PRIMARY KEY,
    name            VARCHAR(255) NOT NULL,
    size            BIGINT NOT NULL,
    owner_id        INT NOT NULL,
    data            LONGBLOB NOT NULL,               -- Contiene el byte[] real
    upload_date     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (owner_id) REFERENCES users(id)
        ON DELETE CASCADE
);

-- ==========================================================
--  TABLA: MESSAGES
-- ==========================================================
CREATE TABLE messages (
    id                  INT AUTO_INCREMENT PRIMARY KEY,
    sender_id           INT NOT NULL,
    receiver_id         INT NOT NULL,
    content_type        ENUM('TEXT', 'FILE') NOT NULL,
    content_text        TEXT,                        -- Usado solo si content_type = TEXT
    content_file_id     INT,                         -- FK si content_type = FILE
    date_sent           DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender_id) REFERENCES users(id)
        ON DELETE CASCADE,
    FOREIGN KEY (receiver_id) REFERENCES users(id)
        ON DELETE CASCADE,
    FOREIGN KEY (content_file_id) REFERENCES files(id)
        ON DELETE SET NULL
);

-- ==========================================================
--  TABLA: LOGS (opcional, para auditoría / acciones del servidor)
-- ==========================================================
CREATE TABLE logs (
    id          BIGINT AUTO_INCREMENT PRIMARY KEY,
    action      VARCHAR(255) NOT NULL,
    timestamp   DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- ==========================================================
--  ÍNDICES RECOMENDADOS PARA RENDIMIENTO
-- ==========================================================
CREATE INDEX idx_user_sent       ON messages(sender_id);
CREATE INDEX idx_user_received   ON messages(receiver_id);
CREATE INDEX idx_user_status     ON sessions(user_id, status);
CREATE INDEX idx_file_owner      ON files(owner_id);

-- ==========================================================
--  VISTAS (para consultas REST o informes)
-- ==========================================================

-- Vista: información general del usuario
CREATE OR REPLACE VIEW user_info AS
SELECT 
    u.id,
    u.username,
    u.email,
    u.total_messages_sent,
    u.total_messages_received,
    MAX(s.last_activity) AS last_connection,
    CASE 
        WHEN MAX(s.status) = 'CONNECTED' THEN 'Conectado'
        ELSE 'Desconectado'
    END AS estado
FROM users u
LEFT JOIN sessions s ON s.user_id = u.id
GROUP BY u.id;

-- Vista: usuarios conectados
CREATE OR REPLACE VIEW connected_users AS
SELECT 
    u.username,
    s.ip,
    s.connection_time,
    s.message_count
FROM users u
JOIN sessions s ON s.user_id = u.id
WHERE s.status = 'CONNECTED';

-- Vista: usuarios desconectados
CREATE OR REPLACE VIEW disconnected_users AS
SELECT 
    u.username,
    s.ip,
    s.connection_time,
    s.disconnection_time,
    s.message_count
FROM users u
JOIN sessions s ON s.user_id = u.id
WHERE s.status = 'DISCONNECTED';

-- Vista: mensajes con IPs (enviados y recibidos)
CREATE OR REPLACE VIEW message_connections AS
SELECT 
    m.id AS message_id,
    u1.username AS sender,
    s1.ip AS sender_ip,
    u2.username AS receiver,
    s2.ip AS receiver_ip,
    m.content_type,
    m.date_sent
FROM messages m
JOIN users u1 ON m.sender_id = u1.id
JOIN users u2 ON m.receiver_id = u2.id
LEFT JOIN sessions s1 ON s1.user_id = u1.id
LEFT JOIN sessions s2 ON s2.user_id = u2.id;
